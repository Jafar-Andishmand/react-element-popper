{
  "Home": "خانه",
  "Installation & Usage": "نصب و راه اندازی",
  "Props & Positions": "پراپ ها و موقعیت ها",
  "Props": "پراپ ها",
  "Positions": "موقعیت ها",
  "Position": "موقعیت",
  "position_description": [
    "تمام مقدار هایی که  میشه به عنوان موقعیت  برای popper  در نظر بگیرید در جدول زیر نوشته شده.",
    "همچنین میتونید بجای موقعیت های نوشته شده ، از مقدار جایگزینشم استفاده کنید ."
  ],
  "Alternative": "جایگزین",
  "Usage": "استفاده",
  "Name": "نام",
  "Type": "تایپ",
  "Default": "پیشفرض",
  "or": "یا",
  "npm_description": "برای نصب این کتابخانه توسط npm کد زیر را در ترمینال خود بنویسید .",
  "yarn_description": "اگر از yarn استفاده میکنید میتونید از کد زیر استفاده کنید.",
  "Main Position": "موقعیت اصلی",
  "Relative Position": "موقعیت نسبی",
  "Fix Main Position": "ثابت ماندن موقعیت اصلی",
  "Fix Relative Position": "ثابت ماندن موقعیت نسبی",
  "Offset Y": "فاصله عمودی",
  "Offset X": "فاصله افقی",
  "Top": "بالا",
  "Bottom": "پایین",
  "Left": "چپ",
  "Right": "راست",
  "Start": "شروع",
  "Center": "وسط",
  "End": "پایان",
  "Disable": "غیر فعال",
  "Enable": "فعال",
  "Arrow": "فلش",
  "Shadow": "سایه",
  "Refrence Element": "عنصر مرجع",
  "Popper Element": "عنصر متحرک",
  "Descriptions": "توضیحات",
  "demo_descriptions": [
    "react element popper برای ساختن منو ، منو های تو در تو ، لیست های کشویی و متحرک سازی المنت ها نسبت به المنت مرجع کاربرد داره.",
    "هنگامی که مقدار موقعیت اصلی، بالا یا پایین باشه فاصله عمودی، و هنگامی که مقدار موقعیت اصلی چپ یا راست باشه،  فاصله افقی فعال می شه."
  ],
  "Basic Import": "ایمپورت کردن کتابخانه در پروژه",
  "basic_import": "در بیشتر مواقع ایمپورت کردن ElementPopper  به تنهایی کفایت میکنه.",
  "basic_import2": "ولی اگر بخواید از فلش (arrow) استفاده کنید، یا بخواید برای پاپر از سایه پیشفرض استفاده کنید باید استایل ها رو هم import کنید. ",
  "Creating DropDown": "ایجاد لیست کشویی",
  "dropdown": [
    "ایجاد Drop Down با ElementPopper خیلی ساده است .",
    "در این مثال یک dropdown ساده با حداقل css را با Element Popper ایجاد میکنیم ."
  ],
  "Simple DropDown": "ساخت لیست کشویی (dropdown) ساده",
  "code": "کد",
  "style.css:": "فایل سی اس اس:",
  "click here": "کلیک کنید",
  "item 1": "آیتم 1",
  "item 2": "آیتم 2",
  "item 3": "آیتم 3",
  "item 4": "آیتم 4",
  "Simple DropDown With Animation": "منو کشویی (drop down) با انیمیشن شروع",
  "dropdown_animation": "اگر می خواهید ظاهر شدن لیست به همراه انیمیشن باشد، از prop انیمیشن استفاده کنید.",
  "Position Left": "منو کشویی در موقعیت چپ",
  "dropdown_right": "شما میتوانید به جای موقعیت bottom که در مثال های بالا استفاده شد ، از هر یک از مقدار های top ، right و چپ هم استفاده کنید .",
  "Nested DropDown": "لیست های کشویی تو در تو",
  "item": "آیتم",
  "Simple Example": "مثال ساده",
  "simple_nested": "با وارد کردن یک ElementPopper  دیگر به عنوان مقدار popper ، میتوانید به هر تعداد که لازم دارید ، منو های تو در تو ایجاد کنید .",
  "nested_dropdown": "در این مثال، با استفاده از قابلیتی که در بالا توضیح داده شد ، یک dropdown با منو های تو در تو ایجاد شده است .",
  "last one": "آخری",
  "Multi Select & Handle Click Outside": "انتخابگر چند تایی و مدیریت کلیک های خارج از محدوده",
  "NavBar": "ناو بار",
  "core_concepts_description": "المنت پاپر عناصر مرجع و متحرک شما رو در چندین کانتینر قرار میده که برای طراحی بهتر layout هاتون باید از چیدمان اون کانتینر ها اطلاع داشته باشید.",
  "core_concepts": [
    "کانتینر اول با مقدار display برابر با inline-block هست که تمام عناصر مرجع ، متحرک و فلش (در صورت فعال بودن) را در بر میگیره و برای بدست آوردن مقدار سمت چپ و بالای عنصر مرجع کاربرد داره.",
    "کانتینر دوم دارای پوزیشن absolute و مقدار بالا و چپ برابر با صفر هست ، که برای موقعیت دهی عنصر متحرک در صفحه با تنظیم مقدار transform آن استفاده می شود.",
    "در آخر ، کانتینر با موقعیت static که در بر گیرنده عنصر متحرک هست و برای بدست آوردن مقدار دقیق عرض و ارتفاع عنصر متحرک استفاده میشه."
  ],
  "container with inline-block display": "کانتینر با مقدار display برابر با inline-block",
  "container with absolute position": "کانتینر با پوزیشن absolute",
  "container with static position": "کانتینر با پوزیشن static",
  "Arrow (optional)": "فلش (اختیاری)",
  "Reference and Popper Larger Than Parent": "عنصر های مرجع و متحرک با اندازه بزرگ تر از المنت والد",
  "popper_larger_parent": [
    "در صورتی که طول یا ارتفاع عنصر های مرجع و متحرک بزرگ تر از المنت والد باشن ، در صورتی موقعیت اصلی عنصر متحرک جابجا میشه که عنصر مرجع از وسط المنت والد عبور کرده باشه .",
    "این شرط برای این قرار داده شده که عنصر متحرک، همیشه در قسمتی از المنت والد قرار بگیره که فضای بیشتری داشته باشه <b>و فقط زمانی در نظر گرفته میشه که لبه عنصر متحرک به لبه قسمت قابل مشاهده شدن document برخورد نکرده باشه </b>."
  ],
  "important_notes": [
    "مهم ترین نکته اینه که این کامپوننت فقط سعی میکنه عنصر متحرک رو در موقعیتی که براش مشخص کردید قرار بده ! چون ممکنه چینش المنت های در بر گیرنده المنت والد جوری باشه که popper در اون موقعیت جا نشه، یا کاربر شروع به اسکرول کردن یا ریسایز کردن صفحه کنه که در اون صورت هم باز موقعیت المنت متحرک عوض میشه. البته شما میتونید این کامپوننت رو مجبور کنید تا موقعیت پاپر رو دقیقا همونجا که شما میخواید نشون بده، که در این صورت باید از پراپرتی های fixMainPosition و fixRelativePosition استفاده کنید.",
    "برای ایجاد فاصله بین المنت مرجع و متحرک از مارجین و پدینگ استفاده نکنید و به جاش از پراپرتی های offsetY و offsetX که در کامپوننت قرار داده شده استفاده کنید.",
    "سعی نکنید پوزیشن کانتینر رو با سی اس اس یا استایل به relative تغییر بدید چون باعث اخلال تو محاسبات موقعیت میشه.",
    "برای فیکس کردن موقعیت اصلی مقدار fixMainPosition رو برابر true و برای فیکس کردن موقعیت نسبی مقدار fixRelativePosition رو برابر true قرار بدید.",
    "اگر میخواید اندازه المنت مرجع رو تغییر بدید مقدار box-sizing اش رو border-box بزارید.",
    "اگر کامپوننت داخل کانتینر با پوزیشن فلکس و فلکس داریکشن column باشه، بهتره برای کانتینر المنت پاپر طول تعریف کنید."
  ],
  "Core Concepts": "مفاهیم اولیه",
  "Important Notes": "نکته های مهم",
  "center": "مرکز",
  "Active Prop": "پراپ فعال کننده",
  "active_prop_1": "در اکثر مواقع به پراپ فعال کننده احتیاجی نیست و برای مخفی و ظاهر کردن عنصر متحرک ، فقط نیاز هست که یک boolean را به عنوان state مقدار دهی کنید.",
  "active_prop_2": "ولی در برخی مواقع مثلا مواقعی که به حجم وسیعی از عملیات برای ساخته شدن کامپوننت عنصر متحرک احتیاج است و به صرفه نیست که برای هر بار ظاهر شدن عنصر متحرک دوباره اون عملیات تکرار بشه ، یا در مواقعی که طول و ارتفاع عنصر متحرک در لحظه ظاهر شدنش مشخص نیست (مثلا طول و عرض بعد از عملیات async مشخص میشه ) لازم هست که برای ظاهر و مخفی شدن عنصر متحرک از پراپ active استفاده کنید . در غیر اینصورت ممکنه که موقعیت عنصر متحرک به درستی محاسبه نشه .",
  "active_prop_3": "اما به ندرت مواردی اتفاق می افته که هیچکدام از دو مثال بالا جوابگو نیست. در این مواقع پیشنهاد میشه، از ترکیب  دو مثال بالا استفاده کنید.",
  "active_prop_4": "در این قسمت سعی کردم برای هرکدوم از این سه موقعیت گفته شده یک مثال عملی بیارم:",
  "First Example": "مثال اول",
  "first_example": [
    "در این مثال از پراپ active استفاده نشده و برای اکثر مواقع کاربرد داره.",
    "در واقع با استفاده از یک boolean به عنوان state، عنصر متحرک در همون لحظه ظاهر شدن تولید میشه."
  ],
  "Second Example": "مثال دوم",
  "second_example": "من در فانکشن بالا یک تغییر ایجاد کردم تا خروجیش رو با تاخیر برگردونه و همانطور که میبینید اگر با روش مثال اول بخواهیم از اون استفاده کنیم، محاسبات موقعیت آن با خطا همراه میشه.",
  "second_example_1": "دلیل بوجود اومدن این خطای محاسباتی اینه که در لحظه اول، به جای div ، مقدار null به عنوان عنصر متحرک تعریف میشه و همون باعث به وجود اومدن این مشکل میشه.",
  "second_example_2": "برای برطرف کردن این مشکل میتونید خیلی راحت از پراپ active استفاده کنید:",
  "second_example_3": "همانطور که میبینید دیگه اشکالی در محاسبه موقعیت عنصر متحرک وجود نداره و دلیلشم اینه که که در حقیقت، عنصر متحرک در لحظه ظاهر شدن تولید نمیشه و همیشه وجود داره، و شما با تغییر مقدار active، فقط visibility اونو از حالت hidden به visible تغییر میدید.",
  "Third Example": "مثال سوم",
  "third_example": "برخی موقع هام پیش میاد که کامپوننت شما مثل مثال دوم تعریف شده، ولی شما میخواید اونو مثل مثال اول ظاهر کنید.",
  "third_example_1": "در این صورت باید از ترکیبی از مثال اول و دوم استفاده کنید:",
  "Refreshing Position": "رفرش کردن موقعیت",
  "refresh_position": [
    "در مواقعی که ممکنه بدون اسکرول یا ریسایز شدن صفحه موقعیت عنصر مرجع تغییر کنه، به دلیل اینکه element popper به click گوش نمیده، موقعیت عنصر متحرک ثابت میمونه.",
    "در این مواقع میتونید از فانکشن refreshPosition که در ref المنت پاپر قرار داره استفاده کنید."
  ],
  "Example 1 (without using refresh position)": "مثال اول (بدون استفاده از refreshPosition)",
  "Example 2 (with using refresh position)": "مثال دوم (با استفاده از refreshPosition)",
  "a demo text to force the refrence element to move forward!": "یک متن نمایشی تا عنصر مرجع را مجبور به حرکت کند!",
  "refresh": "دوباره",
  "Multi Select": "انتخابگر چند تایی",
  "click here to select": "برای انتخاب کلیک کنید",
  "select all": "انتخاب همه",
  "option": "آیتم",
  "Handle Click Outside": "مدیریت کلیک های خارج از محدوده",
  "handle_click_outside": "برای مدیریت کردن کلیک های خارج از محدوده این کد را به مثال قبل اضافه کنید.",
  "toggle visible": "نمایش/عدم نمایش"
}